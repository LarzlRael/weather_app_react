{"version":3,"sources":["constants/weatherConstans.js","components/weatherData/services/transformWeather.js","components/weatherData/services/transformerForecast.js","actions/index.js","components/weatherData/weatherLocation/location.js","components/weatherData/weatherExtraInfo.js","components/weatherData/weatherTemperature.js","components/weatherData/weahterData.js","components/weatherData/services/getUrlByid.js","components/weatherData/index.js","components/LocationList.js","reducer/citys.js","reducer/index.js","reducer/city.js","containers/LocationListContainer.js","components/ForecastItem/ForeCastItem.js","components/forecastExtende.js","containers/forecastExtendContainer.js","App.js","serviceWorker.js","sotre/index.js","index.js"],"names":["CLOUD","SUN","RAIN","SNOW","THUNDER","DRIZZLE","trasnforWeather","weather_data","kelvin","main","humidity","temp","speed","wind","weatherstate","id","weather","getWeahterSate","new_data","temperature","parseInt","Number","convert","from","to","toFixed","console","log","transformForecast","data","list","filter","item","moment","unix","dt","utc","hour","map","weekDay","format","setCity","payload","type","setForecasteData","getWeatherCity","setWeatherCity","api_key","location","city","this","props","className","Component","Location","propTypes","string","isRequired","weatherExtraInfo","weatherTemperature","icons","weatherState","icon","name","size","getWheatherIcon","weahterData","getUribyID","weatherLocation","onWeatherLocationClick","onClick","CircularProgress","LocationList","handleWeatherLocationClick","onSelectedLocation","strTocomponenets","cities","i","key","propType","array","onSelectLocation","func","getForecastDataFromCitis","createSelector","state","forecastData","getWeatherCities","topairs","combineReducers","action","forecasteDataDate","Date","getCity","getForecastDataFromCities","_getForecastDataFromCitis","_getWeatherCities","LocationListContainer","handleSelectionLocation","setWeather","citiesWeather","connect","distpach","value","url","dispatch","getState","a","async","date","forecastDateDate","now","axios","get","setSelectedCity","forEach","ForeCastItem","forecastExtende","forecast","ForecastExtendContainer","App","AppBar","position","Toolbar","variant","color","xs","md","Paper","elevation","Boolean","window","hostname","match","composeEnhacnes","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAAaA,EAAQ,QAERC,EAAM,MAENC,EAAO,OAEPC,EAAO,OAEPC,EAAU,UAEVC,EAAU,UCoCRC,EApBS,SAAAC,GAAiB,IAvBxBC,EAuBuB,EAETD,EAAaE,KAAhCC,EAF4B,EAE5BA,SAAUC,EAFkB,EAElBA,KACVC,EAAUL,EAAaM,KAAvBD,MACFE,EAxBa,SAAAP,GAEnB,IAAMQ,EAAMR,EAAaS,QAAQ,GAAGD,GAGpC,OAAIA,EAAK,IACEX,EACAW,EAAK,IACLV,EACAU,EAAK,IACLb,EACAa,EAAK,IACLZ,EACO,MAAPY,EACAd,EAEAD,EAQUiB,CAAeV,GAK9BW,EAAW,CACbC,YAJgBC,UA7BPZ,EA6ByBG,EA5B/BU,OAAOC,IAAQd,GAAQe,KAAK,KAAKC,GAAG,MAAMC,QAAQ,KAiCrDX,eACAJ,WACAG,KAAK,GAAD,OAAKD,EAAL,SAGR,OADAc,QAAQC,IAAIT,GACLA,GCzBIU,EAdW,SAACC,GAAD,OACtBA,EAAKC,KAAKC,QAAO,SAAAC,GAAI,OACqB,IAAtCC,IAAOC,KAAKF,EAAKG,IAAIC,MAAMC,QACW,KAAtCJ,IAAOC,KAAKF,EAAKG,IAAIC,MAAMC,QACW,KAAtCJ,IAAOC,KAAKF,EAAKG,IAAIC,MAAMC,UAC5BC,KAAI,SAAAN,GAAI,MACP,CACIO,QAASN,IAAOC,KAAKF,EAAKG,IAAIK,OAAO,OACrCH,KAAMJ,IAAOC,KAAKF,EAAKG,IAAIE,OAC3BR,KAAMvB,EAAgB0B,Q,iBCCrBS,EAAU,SAAAC,GAAO,MAAK,CAAEC,KAPb,WAO6BD,YAE/CE,EAAmB,SAAAF,GAAO,MAAK,CAAEC,KARN,oBAQ+BD,YAE1DG,EAAiB,SAAAH,GAAO,MAAK,CAAEC,KARL,mBAQ6BD,YACvDI,EAAiB,SAAAJ,GAAO,MAAK,CAAEC,KARL,mBAQ6BD,YAGvDK,EAAU,mC,gBClBKC,G,uLAEP,IACEC,EAASC,KAAKC,MAAdF,KAER,OADAvB,QAAQC,IAAI,oBAAsBsB,GAE9B,yBAAKG,UAAU,iBACX,4BAAKH,Q,GAPiBI,cAYtCC,SAASC,UAAY,CACjBN,KAAMM,IAAUC,OAAOC,Y,UCZNC,E,iLAEP,IAAD,EACsBR,KAAKC,MAAxBzC,EADH,EACGA,SAAUG,EADb,EACaA,KAClB,OACI,yBAAKuC,UAAU,wBACX,0BAAMA,UAAU,iBAAhB,uBAA+C1C,EAA/C,MACA,0BAAM0C,UAAU,iBAAhB,sBAA6CvC,S,GAPfwC,a,yBCCzBM,E,6MAEjBC,O,mBACK5D,EAAQ,S,cACRC,EAAM,a,cACNC,EAAO,Q,cACPC,EAAO,Q,cACPE,EAAU,e,cACVD,EAAU,oB,kFAECyD,GACZ,IAAMC,EAAOZ,KAAKU,MAAMC,GAExB,OAAIC,EAEO,kBAAC,IAAD,CAAcV,UAAU,QAAQW,KAAMD,EACzCE,KAJS,OAQN,kBAAC,IAAD,CAAcZ,UAAU,QAAQW,KAAK,cACxCC,KATS,S,+BAaX,IAAD,EACiCd,KAAKC,MAAnChC,EADH,EACGA,YAAa0C,EADhB,EACgBA,aAErB,OACI,yBAAKT,UAAU,sBACVF,KAAKe,gBAAgBJ,GAEtB,0BAAMT,UAAU,eAAhB,UAAkCjC,EAAlC,MACA,0BAAMiC,UAAU,mBAAhB,c,GAjCgCC,aCA3Ba,E,iLACP,IAAD,EAEiDhB,KAAKC,MAAMtB,KAAzDV,EAFH,EAEGA,YAAaL,EAFhB,EAEgBA,aAAcJ,EAF9B,EAE8BA,SAAUG,EAFxC,EAEwCA,KAG7C,OACI,yBAAKuC,UAAU,oBACX,kBAAC,EAAD,CACIjC,YAAaA,EACb0C,aAAc/C,IAClB,kBAAC,EAAD,CAAkBJ,SAAUA,EAAUG,KAAMA,S,GAXnBwC,a,SCI1Bc,IC+BAC,EATS,SAAC,GAAD,IAAGC,EAAH,EAAGA,uBAAwBpB,EAA3B,EAA2BA,KAAMpB,EAAjC,EAAiCA,KAAjC,OAEpB,yBAAKuB,UAAU,sBAAsBkB,QAASD,GAC1C,kBAAC,EAAD,CAAUpB,KAAMA,IACfvB,QAAQC,IAAI,yBAAyBE,EAAK,uBAAuBoB,GACjEpB,EAAO,kBAAC,EAAD,CAAaA,KAAMA,IACrB,kBAAC0C,EAAA,EAAD,QChCOC,G,iNAEjBC,2BAA6B,SAACxB,GAAU,IAC5ByB,EAAuB,EAAKvB,MAA5BuB,mBACRhD,QAAQC,IAAR,+BAAoC+C,IACpCA,EAAmBzB,I,EAEvB0B,iBAAmB,SAAAC,GAAM,OACrBA,EAAOtC,KAAI,SAACW,EAAM4B,GAAP,OACP,kBAAC,EAAD,CACIC,IAAKD,EACL5B,KAAMA,EAAKc,KACXM,uBAAwB,kBAAM,EAAKI,2BAA2BxB,EAAKc,OACnElC,KAAMoB,EAAKpB,W,wEAGb,IACE+C,EAAW1B,KAAKC,MAAhByB,OACR,OACI,yBAAKxB,UAAU,gBACVF,KAAKyB,iBAAiBC,Q,GApBGvB,cAyB1CmB,EAAaO,SAAW,CACpBH,OAAQrB,IAAUyB,MAAMvB,WACxBwB,iBAAkB1B,IAAU2B,M,yDCVnBC,GAA2BC,aAAe,SAACC,EAAOpC,GAAR,OAAiBoC,EAAMpC,IACvEoC,EAAMpC,GAAMqC,gBAAc,SAAAA,GAAY,OAAIA,KAIpCC,GACTH,aAAe,SAAAC,GAAK,OAHDT,EAGoBS,EAHTG,KAAQZ,GAAQtC,KAAI,mCAAEwC,EAAF,WAAmB,CAAEA,MAAKf,KAAMe,EAAKjD,KAArC,KAAiDb,YAAhF,IAAA4D,KAG4B,SAAAA,GAAM,OAAIA,KCvB9Ca,eAAgB,CAC3Bb,ODHkB,WAAyB,IAAxBS,EAAuB,uDAAf,GAAIK,EAAW,uCAC1C,OAAQA,EAAO/C,MACX,IREyB,oBQFzB,MACmC+C,EAAOhD,QAA9BO,EADZ,EACYA,KAAMqC,EADlB,EACkBA,aACd,OAAO,gBAAKD,EAAZ,eAAoBpC,EAApB,gBAAgCoC,EAAMpC,GAAtC,CAA6CqC,eAAcK,kBAAmB,IAAIC,SACtF,IRCwB,mBQApB,IAAM3C,EAAOyC,EAAOhD,QACpB,OAAO,gBAAK2C,EAAZ,eAAoBpC,EAApB,gBAAgCoC,EAAMpC,GAAtC,CAA6CjC,QAAS,SAG1D,IRHwB,mBQGA,IAAD,EACO0E,EAAOhD,QAAzBO,EADW,EACXA,KAAMjC,EADK,EACLA,QACd,OAAO,gBAAKqE,EAAZ,eAAoBpC,EAApB,gBAAgCoC,EAAMpC,GAAtC,CAA6CjC,cAEjD,QACI,OAAOqE,ICXfpC,KCLgB,WAAyB,IAAxBoC,EAAuB,uDAAf,GAAIK,EAAW,uCACxC,OAAQA,EAAO/C,MACX,IVEgB,WUDZ,OAAO+C,EAAOhD,QAClB,QACI,OAAO2C,MDGNQ,GAAU,SAAAR,GAAK,OAAIA,EAAMpC,MAEzB6C,GAA4B,SAAAT,GAAK,OAAKU,GAA0BV,EAAMT,OAAQiB,GAAQR,KAEtFE,GAAmBH,aAAe,SAAAC,GAAK,OAAIA,EAAMT,SAAQoB,IEFhEC,G,2MAWFC,wBAA0B,SAACjD,GACvB,EAAKE,MAAMV,QAAQQ,I,mFAVF,IAAD,EAC8BC,KAAKC,MAA3CgD,EADQ,EACRA,WAAY1D,EADJ,EACIA,QAASmC,EADb,EACaA,OAAQ3B,EADrB,EACqBA,KAErCkD,EAAWvB,GAEXnC,EAAQQ,K,+BASR,OACI,6BACI,kBAAC,EAAD,CAAc2B,OAAQ1B,KAAKC,MAAMiD,cAC7B1B,mBAAoBxB,KAAKgD,+B,GAnBT7C,aA0CrBgD,gBALS,SAAAhB,GAAK,MAAK,CAC9Be,cAAeb,GAAiBF,GAChCpC,KAAM4C,GAAQR,OAPO,SAACiB,GAAD,MAAe,CACpC7D,QAAS,SAAA8D,GAAK,OAAID,EXpBS,SAAA5D,GAC3BhB,QAAQC,IAAI,qBAAuBe,GAEnC,IAAM8D,EAAG,UARD,kDAQC,eAAgB9D,EAAhB,kBAAiCK,GAG1C,OAAO,SAAO0D,EAAUC,GAAjB,uBAAAC,EAAAC,OAAA,mDAEHH,EAAShE,EAAQC,IAEX2C,EAAQqB,IACRG,EAAOxB,EAAMT,OAAOlC,GAASoE,iBAE7BC,EAAM,IAAInB,OACZiB,GAASE,EAAMF,EAAQ,KARxB,mEAAAF,EAAA,MAYwBK,IAAMC,IAAIT,IAZlC,cAYGjG,EAZH,OAaG+E,EAAe1D,EAAkBrB,EAAasB,MACpDH,QAAQC,IAAI2D,GAdT,kBAeImB,EAAS7D,EAAiB,CAAEK,KAAMP,EAAS4C,mBAf/C,uCWcoB4B,CAAgBX,KAC3CJ,WAAY,SAAAvB,GAAM,OAAI0B,GX6BA5D,EW7BoBkC,EX8B1ClD,QAAQC,IAAI,0CAA4Ce,GACjD,SAAA+D,GACH/D,EAAQyE,SAAQ,SAAMlE,GAAN,mBAAA0D,EAAAC,OAAA,uDAEZH,EAAS5D,EAAeI,IAClBuD,EAHM,UAxDP,iDAwDO,eAGqBvD,EAHrB,kBAGmCF,GAHnC,WAAA4D,EAAA,MAKeK,IAAMC,IAAIT,IALzB,OAKNjG,EALM,OAONS,EAAUV,EAAgBC,EAAasB,MAC7C4E,EAAS3D,EAAe,CAAEG,OAAMjC,aARpB,2CAHE,IAAA0B,MWrBX2D,CAA2CJ,IClDrCmB,G,iLAEP,IAAD,EAE2BlE,KAAKC,MAA7BZ,EAFH,EAEGA,QAASF,EAFZ,EAEYA,KAAMR,EAFlB,EAEkBA,KACvB,OACI,6BACI,4BACKU,EADL,UACqBF,EADrB,SAGA,kBAAC,EAAD,CAAaR,KAAMA,S,GAVOwB,aC2B3BgE,GAbS,SAAC,GAAD,IAAG/B,EAAH,EAAGA,aAAcrC,EAAjB,EAAiBA,KAAjB,OACpB,6BACI,wBAAIG,UAAU,gBAAd,4BACUH,GAETqC,EAAqCA,EAfrBhD,KAAI,SAAAgF,GAAQ,OAC7B,kBAAC,GAAD,CAAcxC,IAAG,UAAKwC,EAAS/E,SAAd,OAAwB+E,EAASjF,MAC9CE,QAAS+E,EAAS/E,QAClBV,KAAMyF,EAASzF,KACfQ,KAAMiF,EAASjF,UAIf,kBAACkC,EAAA,EAAD,QCRNgD,G,iLAEQ,IAAD,EAC0BrE,KAAKC,MAA5BF,EADH,EACGA,KAAMqC,EADT,EACSA,aAEd,OACIrC,GACA,kBAAC,GAAD,CAAiBA,KAAMA,EAAMqC,aAAcA,Q,GAPjBjC,aAoBvBgD,gBAJQ,SAAChB,GAAD,MAClB,CAAEpC,KAAM4C,GAAQR,GAAQC,aAAcQ,GAA0BT,MAG9B,KAAxBgB,CAA8BkB,IC+C9BC,G,2MAxCb5C,OAAS,CAAC,QAAS,QAAS,QAAS,S,wEAInC,OAEE,kBAAC,OAAD,KACE,kBAAE,MAAF,KACE,kBAAC6C,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAYC,QAAQ,KAAKC,MAAM,WAA/B,kBAMN,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAKC,GAAI,GAAIC,GAAI,GAEf,kBAAC,GAAD,CAAuBnD,OAAQ1B,KAAK0B,UAGtC,kBAAC,MAAD,CAAKkD,GAAI,GAAIC,GAAI,GACf,kBAACC,EAAA,EAAD,CAAOC,UAAW,GAChB,yBAAK7E,UAAU,WAGX,kBAAC,GAAD,e,GArCAC,aCbE6E,QACW,cAA7BC,OAAOnF,SAASoF,UAEe,UAA7BD,OAAOnF,SAASoF,UAEhBD,OAAOnF,SAASoF,SAASC,MACvB,2D,aCVAC,GAAkBH,OAAOI,sCAAwCC,IAE1DC,GAAQC,YAAYC,GANZ,CACjB1F,KAAM,SAK+CqF,GAAgBM,YAAgBC,QCHzFC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,IACb,kBAAC,GAAD,OAEFO,SAASC,eAAe,SFwHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9e5d26a1.chunk.js","sourcesContent":["export const CLOUD = 'cloud'\n\nexport const SUN = 'sun'\n\nexport const RAIN = 'rain'\n\nexport const SNOW = 'snow'\n\nexport const THUNDER = 'thunder'\n\nexport const DRIZZLE = 'drizzle'\n","import convert from \"convert-units\";\nimport { SUN, DRIZZLE, CLOUD, RAIN, THUNDER, SNOW } from '../../../constants/weatherConstans';\n\nconst get_temp = kelvin => {\n    return Number(convert(kelvin).from(\"K\").to(\"C\")).toFixed(0)\n}\nconst getWeahterSate = weather_data => {\n    //const { id } = weather_data.weather;\n    const id  = weather_data.weather[0].id\n    //console.log(weather_data.weather)\n    \n    if (id < 300) {\n        return THUNDER\n    } else if (id < 400) {\n        return DRIZZLE\n    } else if (id < 600) {\n        return RAIN\n    } else if (id < 700) {\n        return SNOW\n    } else if (id === 800) {\n        return SUN;\n    } else {\n        return CLOUD\n    }\n}\n\nconst trasnforWeather = weather_data => {\n\n    const { humidity, temp } = weather_data.main;\n    const { speed } = weather_data.wind;\n    const weatherstate = getWeahterSate(weather_data);\n    //convertiendo a number por que devuelve string (no se porque)\n    const temperature = parseInt(get_temp(temp))\n    // console.log('valores recibidos : '+humidity+\"\\ntemperatura : \"+temperature+\n    // \"\\nVelocidad del viento : \"+speed+\"\\nWheatherDate : \"+weatherstate)\n    const new_data = {\n        temperature,\n        weatherstate,\n        humidity,\n        wind: `${speed} m/s`\n    }\n    console.log(new_data)\n    return new_data;\n\n}\n\nexport default trasnforWeather;","import moment from 'moment'\nimport 'moment/locale/es'\nimport trasnforWeather from './transformWeather';\nconst transformForecast = (data) => (\n    data.list.filter(item => (\n        moment.unix(item.dt).utc().hour() === 6 ||\n        moment.unix(item.dt).utc().hour() === 12 ||\n        moment.unix(item.dt).utc().hour() === 18\n    )).map(item => (\n        {\n            weekDay: moment.unix(item.dt).format('ddd'),\n            hour: moment.unix(item.dt).hour(),\n            data: trasnforWeather(item)\n        }\n    ))\n)\n\nexport default transformForecast;","import transformForecast from '../components/weatherData/services/transformerForecast';\n\nimport trasnforWeather from '../components/weatherData/services/transformWeather';\nimport axios from 'axios'\n\n\nexport const SET_CITY = 'SET_CITY';\nexport const SET_FORECAST_DATA = 'SET_FORECAST_DATA';\n\nexport const GET_WEATHER_CITY = 'GET_WEATHER_CITY';\nexport const SET_WEATHER_CITY = 'SET_WEATHER_CITY';\n\n//const setCity = value => ({ type: 'setcity', value })\nexport const setCity = payload => ({ type: SET_CITY, payload })\n\nconst setForecasteData = payload => ({ type: SET_FORECAST_DATA, payload });\n\nconst getWeatherCity = payload => ({ type: GET_WEATHER_CITY, payload })\nconst setWeatherCity = payload => ({ type: SET_WEATHER_CITY, payload })\n\nconst uri = 'http://api.openweathermap.org/data/2.5/forecast';\nconst api_key = '1df4b54c2551746c00253fd4a88eedb4'\nconst url_weather = `http://api.openweathermap.org/data/2.5/weather`\n\n//payload es el valor de id de la ciudad que queremos consultar\nexport const setSelectedCity = payload => {\n    console.log('valor de payload: ' + payload)\n\n    const url = `${uri}?id=${payload}&appid=${api_key}`;\n    //console.log('haciendo peticion a a : ' + url)\n    //console.log(peticion)\n    return async (dispatch, getState) => {\n        //importando por que sin esto no se actuliza el otro estado\n        dispatch(setCity(payload));\n        //activar en el estado la busque da de datos\n        const state = getState();\n        const date = state.cities[payload].forecastDateDate\n\n        const now = new Date();\n        if (date && (now - date) < 1 * 60 * 1000) {\n            return\n        }\n\n        const weather_data = await axios.get(url)\n        const forecastData = transformForecast(weather_data.data);\n        console.log(forecastData);\n        return dispatch(setForecasteData({ city: payload, forecastData }))\n\n    };\n};\n\n//otra forma de hacer el estado asyncrono con fetch\n// export const setSelectedCity = payload => {\n//     console.log('valor de payload: ' + payload)\n\n//     const url = `${uri}?id=${payload}&appid=${api_key}`;\n//     console.log('haciendo peticion a a : ' + url)\n//     //console.log(peticion)\n//     return dispatch => {\n//         //activar en el estado la busque da de datos\n//         dispatch(setCity(payload));\n//         return fetch(url).then(\n//             data => (data.json())\n//         ).then(\n//             weather_data => {\n//                 const forecastData = transformForecast(weather_data);\n//                 console.log(forecastData);\n//                 dispatch(setForecasteData({ city: payload, forecastData }))\n//             }\n//         );\n\n//     };\n// };\n\n\nexport const setWeather = payload => {\n    console.log('el valor de payload de setweather es : ' + payload)\n    return dispatch => {\n        payload.forEach(async city => {\n\n            dispatch(getWeatherCity(city));\n            const url = `${url_weather}?id=${city}&appid=${api_key}`;\n\n            const weather_data = await axios.get(url)\n\n            const weather = trasnforWeather(weather_data.data)\n            dispatch(setWeatherCity({ city, weather }))\n\n        })\n    }\n    // handleUpdate = async () => {\n    //     // el numero representa el id de la ciudad de open weather\n    //     const { id_city } = this.props\n    //     //console.log('id de la ciudad : ' + id_city)\n    //     const weather = await axios.get(getUribyID(id_city))\n    //     // el nombre de la ciudad se encuetra en esta constante\n    //     const { name } = weather.data\n\n    //     const newData = weatherTransform(weather.data);\n    //     this.setState({\n    //         data: newData,\n    //         city: name\n    //     })\n    // }\n\n}","import React, { Component } from 'react'\nimport propTypes from 'prop-types';\nimport './stylesLocation.css'\nexport default class location extends Component {\n\n    render() {\n        const { city } = this.props\n        console.log('ciudad recibida :' + city)\n        return (\n            <div className=\"locationCount\">\n                <h1>{city}</h1>\n            </div>\n        )\n    }\n}\nLocation.propTypes = {\n    city: propTypes.string.isRequired,\n}","import React, { Component } from 'react'\nimport propTypes from 'prop-types';\nimport './styles.css'\n\nexport default class weatherExtraInfo extends Component {\n\n    render() {\n        const { humidity, wind } = this.props\n        return (\n            <div className=\"weatherExtraInfoCont\">\n                <span className=\"extraInfoText\" >Humedad : {`${humidity}%`}</span>\n                <span className=\"extraInfoText\">Viento : {`${wind}`}</span>\n            </div>\n        )\n    }\n}\n\n\nweatherExtraInfo.propTypes  = {\n    humidity : propTypes.number.isRequired,\n    wind : propTypes.string\n}","import React, { Component } from 'react'\nimport WeatherIcons from 'react-weathericons'\nimport propTypes from 'prop-types';\nimport './styles.css'\nimport { SUN, SNOW, RAIN, CLOUD, DRIZZLE, THUNDER } from '../../constants/weatherConstans'\nexport default class weatherTemperature extends Component {\n\n    icons = {\n        [CLOUD]: 'cloud',\n        [SUN]: 'day-sunny',\n        [RAIN]: 'rain',\n        [SNOW]: 'snow',\n        [DRIZZLE]: 'day-showers',\n        [THUNDER]: 'day-thunderstorn',\n    };\n    getWheatherIcon(weatherState) {\n        const icon = this.icons[weatherState]\n        const sizeIcon = \"4x\"\n        if (icon) {\n            //console.log(\"icono : \"+icon)\n            return <WeatherIcons className=\"wicon\" name={icon}\n                size={sizeIcon} />\n        }\n        else {\n            //console.log(\"icono : \" + icon)\n            return <WeatherIcons className=\"wicon\" name=\"{day-sunny}\"\n                size={sizeIcon} />\n        }\n    }\n\n    render() {\n        const { temperature, weatherState } = this.props\n        //console.log('element enviado : ' + weatherState + \"\\ntemperatura :\" + temperature)\n        return (\n            <div className=\"weatherTemperature\">\n                {this.getWheatherIcon(weatherState)}\n\n                <span className=\"temperature\">{`${temperature} `}</span>\n                <span className=\"temperatureType\">C°</span>\n            </div >\n        )\n    }\n}\n\nweatherTemperature.propTypes = {\n    temperature: propTypes.number.isRequired,\n    weatherState: propTypes.string.isRequired\n}","import React, { Component } from 'react';\nimport propTypes from 'prop-types'\nimport WeatherExtraInfo from './weatherExtraInfo';\nimport WeatherTemperature from './weatherTemperature';\nimport './styles.css'\nexport default class weahterData extends Component {\n    render() {\n        \n        const { temperature, weatherstate, humidity, wind } = this.props.data;\n        \n\n        return (\n            <div className=\"weatherDataCount\">\n                <WeatherTemperature\n                    temperature={temperature}\n                    weatherState={weatherstate} />\n                <WeatherExtraInfo humidity={humidity} wind={wind} />\n            </div>\n        )\n    }\n}\nweahterData.propTypes = {\n    data: propTypes.shape({\n        temperature: propTypes.number.isRequired,\n        weatherstate: propTypes.string.isRequired,\n        humidity: propTypes.number.isRequired,\n        wind: propTypes.string.isRequired\n    }\n    )\n}\n\n\n","import { base_url, appid} from '../../../constants/api_url';\n\nfunction getUribyID(idCity) {\n//    console.log(\"id_city :D : \" + idCity)\n    const uri = `${base_url}?id=${idCity}&appid=${appid}`\n    \n    return  uri;  \n};\n\nexport default getUribyID;\n","import React from 'react';\nimport Location from './weatherLocation/location';\nimport WeatherData from './weahterData';\nimport './weatherLocation/stylesLocation.css';\nimport { SUN } from '../../constants/weatherConstans';\nimport './styles.css';\n\n//funcion donde se trasforma que esta en otro archivo\n//import weatherTransform from '../weatherData/services/transformWeather';\n//importadno la url donde se hace la peticiin get\nimport axios from 'axios'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport propTypes from 'prop-types';\n// importando la solicutid a la api del clima\nimport getUribyID from '../weatherData/services/getUrlByid';\n\n\n// handleUpdate = async () => {\n//     // el numero representa el id de la ciudad de open weather\n//     const { id_city } = this.props\n//     //console.log('id de la ciudad : ' + id_city)\n//     const weather = await axios.get(getUribyID(id_city))\n//     // el nombre de la ciudad se encuetra en esta constante\n//     const { name } = weather.data\n\n//     const newData = weatherTransform(weather.data);\n//     this.setState({\n//         data: newData,\n//         city: name\n//     })\n// }\nconst weatherLocation = ({ onWeatherLocationClick, city, data }) => (\n    \n    <div className=\"weatherLocationCont\" onClick={onWeatherLocationClick}>\n        <Location city={city} />\n        {console.log('el valor de data es : '+data+\"\\ny el valor de citi\"+city)}\n        {data ? <WeatherData data={data} />\n            : <CircularProgress />}\n    </div>\n);\nexport default weatherLocation;\n    \n\nweatherLocation.propTypes = {\n    id_city: propTypes.number.isRequired,\n    onWeatherLocationClick: propTypes.func,\n    data: propTypes.shape({\n        temperature: propTypes.number.isRequired,\n        weatherstate: propTypes.string.isRequired,\n        humidity: propTypes.number.isRequired,\n        wind: propTypes.string.isRequired\n    }\n    )\n}","import React, { Component } from 'react'\nimport WeatherLocation from './weatherData/index'\nimport propTypes from 'prop-types'\nimport './weatherData/locationListStyle.css';\n\nexport default class LocationList extends Component {\n\n    handleWeatherLocationClick = (city) => {\n        const { onSelectedLocation } = this.props;\n        console.log(`ciudad Seleccionada: ${onSelectedLocation}`);\n        onSelectedLocation(city)\n    }\n    strTocomponenets = cities => (\n        cities.map((city, i) =>\n            <WeatherLocation\n                key={i}\n                city={city.name}\n                onWeatherLocationClick={() => this.handleWeatherLocationClick(city.name)}\n                data={city.data} />)\n    )\n\n    render() {\n        const { cities } = this.props\n        return (\n            <div className=\"locationList\" >\n                {this.strTocomponenets(cities)}\n            </div>\n        )\n    }\n}\nLocationList.propType = {\n    cities: propTypes.array.isRequired,\n    onSelectLocation: propTypes.func\n}","import { SET_FORECAST_DATA, GET_WEATHER_CITY, SET_WEATHER_CITY } from \"./../actions/index\";\nimport { createSelector } from 'reselect';\nimport topairs from 'lodash.topairs'\nexport const cities = (state = {}, action) => {\n    switch (action.type) {\n        case SET_FORECAST_DATA:\n            const { city, forecastData } = action.payload;\n            return { ...state, [city]: { ...state[city], forecastData, forecasteDataDate: new Date() } };\n        case GET_WEATHER_CITY: {\n            const city = action.payload\n            return { ...state, [city]: { ...state[city], weather: null } }\n        }\n\n        case SET_WEATHER_CITY: {\n            const { city, weather } = action.payload;\n            return { ...state, [city]: { ...state[city], weather } }\n        }\n        default:\n            return state;\n    }\n}\n\nexport const getForecastDataFromCitis = createSelector((state, city) => state[city]\n    && state[city].forecastData, forecastData => forecastData)\n\nconst ObjetsToArrays = cities => (topairs(cities).map(([key, value]) => ({ key, name: key, data: value.weather })))\n\nexport const getWeatherCities =\n    createSelector(state => ObjetsToArrays(state), cities => cities)","import { combineReducers } from 'redux'\nimport { createSelector } from \"reselect\";\nimport { cities, getForecastDataFromCitis as _getForecastDataFromCitis, getWeatherCities as _getWeatherCities } from './citys'\nimport { city } from './city'\n\nexport default combineReducers({\n    cities,\n    city\n});\n\nexport const getCity = state => state.city\n\nexport const getForecastDataFromCities = state => (_getForecastDataFromCitis(state.cities, getCity(state)));\n\nexport const getWeatherCities = createSelector(state => state.cities, _getWeatherCities)\n","import { SET_CITY } from \"../actions\";\n\nexport const city = (state = {}, action) => {\n    switch (action.type) {\n        case SET_CITY:\n            return action.payload\n        default:\n            return state\n    }\n}\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types'\n// importando la funcion desde la carpeta de acciones\n\nimport { setSelectedCity, setWeather } from '../actions/index';\n\n// importadno el componete de location_list\nimport LocationList from '../components/LocationList';\n//importando de el reducer\nimport { getWeatherCities, getCity } from './../reducer'\n\nclass LocationListContainer extends Component {\n\n    componentDidMount() {\n        const { setWeather, setCity, cities, city } = this.props;\n\n        setWeather(cities);\n        \n        setCity(city);\n    }\n\n\n    handleSelectionLocation = (city) => {\n        this.props.setCity(city)\n    }\n\n    render() {\n        return (\n            <div>\n                <LocationList cities={this.props.citiesWeather}\n                    onSelectedLocation={this.handleSelectionLocation} />\n            </div>\n        );\n    }\n}\n\nLocationListContainer.propTypes = {\n    setCity: propTypes.func.isRequired,\n    cities: propTypes.array.isRequired,\n    citiesWeather: propTypes.array,\n    city: propTypes.string.isRequired,\n}\n\nconst mapDistpaccProps = (distpach) => ({\n    setCity: value => distpach(setSelectedCity(value)),\n    setWeather: cities => distpach(setWeather(cities))\n})\n\nconst mapStateToProps = state => ({\n    citiesWeather: getWeatherCities(state),\n    city: getCity(state)\n})\n\nexport default connect(mapStateToProps, mapDistpaccProps)(LocationListContainer)","import React, { Component } from 'react'\nimport propTypes from 'prop-types'\nimport WeahterData from '../weatherData/weahterData'\n\nexport default class ForeCastItem extends Component {\n\n    render() {\n        \n        const { weekDay, hour, data } = this.props\n        return (\n            <div>\n                <h3>\n                    {weekDay} hora :{hour} hrs.\n                </h3>\n                <WeahterData data={data}></WeahterData>\n            </div>\n        )\n    }\n}\nForeCastItem.propTypes = {\n    weekDay: propTypes.string.isRequired,\n    hour: propTypes.number.isRequired\n}","import React from 'react';\nimport propTypes from 'prop-types';\nimport ForeCastItem from './ForecastItem/ForeCastItem'\nimport './weatherData/locationListStyle.css';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n// import transformerForecast from './weatherData/services/transformerForecast';\n// import axios from 'axios';\nconst renderForeCastItemDay = (forecasetData) => {\n    return forecasetData.map(forecast => (\n        <ForeCastItem key={`${forecast.weekDay}${forecast.hour}`}\n            weekDay={forecast.weekDay}\n            data={forecast.data}\n            hour={forecast.hour} />))\n}\n\nconst renderProgres = () => {\n    return (<CircularProgress />)\n}\nconst forecastExtende = ({ forecastData, city }) => (\n    < div >\n        <h2 className=\"forest-title\">Pronostico extendido para\n                 {city}</h2>\n\n        {forecastData ? renderForeCastItemDay(forecastData) : renderProgres()}\n    </div >\n)\n\nforecastExtende.propTypes = {\n    city: propTypes.number.isRequired,\n    forecastData: propTypes.array\n}\nexport default forecastExtende;","import React, { Component } from 'react'\nimport ForecastExtende from '../components/forecastExtende';\nimport { connect } from 'react-redux'\nimport propTypes from 'prop-types';\n//import { getForecastDataFromCitis } from './../reducer/citys'\n\nimport { getCity, getForecastDataFromCities } from './../reducer/'\n\nclass ForecastExtendContainer extends Component {\n\n    render() {\n        const { city, forecastData } = this.props;\n\n        return (\n            city &&\n            <ForecastExtende city={city} forecastData={forecastData} />\n        )\n    }\n}\n\nForecastExtendContainer.propTypes = {\n    city: propTypes.number.isRequired,\n    forecastData: propTypes.array\n}\nconst mapSateToProps = (state) =>\n    ({ city: getCity(state), forecastData: getForecastDataFromCities(state) });\n\n\nexport default connect(mapSateToProps, null)(ForecastExtendContainer);","import React, { Component } from 'react';\n\nimport Paper from '@material-ui/core/Paper'\nimport AppBar from '@material-ui/core/AppBar'\nimport TypoGraphy from '@material-ui/core/Typography'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport './App.css';\n// import LocationList from './components/LocationList'\n// import ForecastExtende from './components/forecastExtende'\n// //importando el modulo de redux\n// import { createStore } from 'redux'\n// //importadno el archivo del streo que esta en otro store/index.js\n// import { store } from './sotre/index'\n// modulo para hacer responsive \nimport { Grid, Row, Col } from 'react-flexbox-grid'\n// // importando la funcion desde la carpeta de aciontes\n// import { setCity } from './actions/index'\n// const store = createStore(() => { },\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n// Essto viene desde otro archoviconst setCity = value => ({ type: 'setcity', value })\n//importando el modulo donde esta el container list location\nimport LocationListcontainer from './containers/LocationListContainer'\n//importando el modulo de el forecasteextented container\nimport ForecastExtendContainer from './containers/forecastExtendContainer'\nclass App extends Component {\n  //esta parte ya no se evalua aqui\n  // constructor() {\n  //   super();\n  //   this.state = { city: null };\n  // }\n  //3435910 = buenos aires, Argentina\n  //3435910 = Sucre, Bolivia\n  //4366164 = Washington, us\n\n  cities = [3911925, 3435910, 4366164, 3435910];\n\n  render() {\n    // const { city } = this.state;\n    return (\n\n      <Grid>\n        < Row >\n          <AppBar position=\"static\">\n            <Toolbar>\n              <TypoGraphy variant='h2' color='inherit'>\n                Weather App\n            </TypoGraphy>\n            </Toolbar>\n          </AppBar>\n        </Row >\n        <Row>\n          <Col xs={12} md={6} >\n\n            <LocationListcontainer cities={this.cities} />\n            \n          </Col>\n          <Col xs={12} md={6}>\n            <Paper elevation={4}>\n              <div className=\"details\">\n\n                {\n                  <ForecastExtendContainer />\n                  // <ForecastExtende city={city} city_name={'xD'} />\n                }\n              </div>\n            </Paper>\n          </Col>\n        </Row>\n      </Grid >\n    )\n  };\n}\n\n\nexport default App;\n\n//otro forma de enviar el componete \n// export default  connect(null, mapDispatchtoPropsAcions)(App)\n// export default AppConected;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport reducers from './../reducer/index'\nimport thunk from 'redux-thunk'\n\nconst initialstate = {\n    city: 3911925\n}\n\nconst composeEnhacnes = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(reducers, initialstate, composeEnhacnes(applyMiddleware(thunk)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './sotre/index'\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}